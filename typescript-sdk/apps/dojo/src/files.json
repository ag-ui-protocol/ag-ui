{
  "llama-index::agentic_chat": [
    {
      "name": "page.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCoAgent, useCopilotAction, useCopilotChat } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\ninterface AgenticChatProps {\n  params: Promise<{\n    integrationId: string;\n  }>;\n}\n\nconst AgenticChat: React.FC<AgenticChatProps> = ({ params }) => {\n  const { integrationId } = React.use(params);\n\n  return (\n    <CopilotKit\n      runtimeUrl={`/api/copilotkit/${integrationId}`}\n      showDevConsole={false}\n      // agent lock to the relevant agent\n      agent=\"agentic_chat\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  const [background, setBackground] = useState<string>(\"--copilot-kit-background-color\");\n\n  useCopilotAction({\n    name: \"change_background\",\n    description:\n      \"Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.\",\n    parameters: [\n      {\n        name: \"background\",\n        type: \"string\",\n        description: \"The background. Prefer gradients.\",\n      },\n    ],\n    handler: ({ background }) => {\n      setBackground(background);\n      return {\n        status: \"success\",\n        message: `Background changed to ${background}`,\n      };\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-full w-full\" style={{ background }}>\n      <div className=\"h-full w-full md:w-8/10 md:h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-2xl\"\n          labels={{ initial: \"Hi, I'm an agent. Want to chat?\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AgenticChat;\n",
      "language": "typescript",
      "type": "file"
    },
    {
      "name": "style.css",
      "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n}\n  \n.copilotKitChat {\n  background-color: #fff !important;\n}\n  ",
      "language": "css",
      "type": "file"
    },
    {
      "name": "README.mdx",
      "content": "# 🤖 Agentic Chat with Frontend Tools\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic chat** capabilities with **frontend\ntool integration**:\n\n1. **Natural Conversation**: Chat with your Copilot in a familiar chat interface\n2. **Frontend Tool Execution**: The Copilot can directly interacts with your UI\n   by calling frontend functions\n3. **Seamless Integration**: Tools defined in the frontend and automatically\n   discovered and made available to the agent\n\n## How to Interact\n\nTry asking your Copilot to:\n\n- \"Can you change the background color to something more vibrant?\"\n- \"Make the background a blue to purple gradient\"\n- \"Set the background to a sunset-themed gradient\"\n- \"Change it back to a simple light color\"\n\nYou can also chat about other topics - the agent will respond conversationally\nwhile having the ability to use your UI tools when appropriate.\n\n## ✨ Frontend Tool Integration in Action\n\n**What's happening technically:**\n\n- The React component defines a frontend function using `useCopilotAction`\n- CopilotKit automatically exposes this function to the agent\n- When you make a request, the agent determines whether to use the tool\n- The agent calls the function with the appropriate parameters\n- The UI immediately updates in response\n\n**What you'll see in this demo:**\n\n- The Copilot understands requests to change the background\n- It generates CSS values for colors and gradients\n- When it calls the tool, the background changes instantly\n- The agent provides a conversational response about the changes it made\n\nThis technique of exposing frontend functions to your Copilot can be extended to\nany UI manipulation you want to enable, from theme changes to data filtering,\nnavigation, or complex UI state management!\n",
      "language": "markdown",
      "type": "file"
    },
    {
      "name": "agentic_chat.py",
      "content": "from llama_index.llms.openai import OpenAI\nfrom llama_index.protocols.ag_ui.router import get_ag_ui_workflow_router\nfrom typing import Annotated\n\n\n# This tool has a client-side version that is actually called to change the background\ndef change_background(\n    background: Annotated[str, \"The background. Prefer gradients.\"],\n) -> str:\n    \"\"\"Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.\"\"\"\n    return f\"Changing background to {background}\"\n\nagentic_chat_router = get_ag_ui_workflow_router(\n    llm=OpenAI(model=\"gpt-4.1\"),\n    frontend_tools=[change_background],\n)\n",
      "language": "python",
      "type": "file"
    }
  ],
  "llama-index::human_in_the_loop": [
    {
      "name": "page.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction, useLangGraphInterrupt } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport { useTheme } from \"next-themes\";\n\ninterface HumanInTheLoopProps {\n  params: Promise<{\n    integrationId: string;\n  }>;\n}\n\nconst HumanInTheLoop: React.FC<HumanInTheLoopProps> = ({ params }) => {\n  const { integrationId } = React.use(params);\n\n  return (\n    <CopilotKit\n      runtimeUrl={`/api/copilotkit/${integrationId}`}\n      showDevConsole={false}\n      // agent lock to the relevant agent\n      agent=\"human_in_the_loop\"\n    >\n      <Chat integrationId={integrationId} />\n    </CopilotKit>\n  );\n};\n\ninterface Step {\n  description: string;\n  status: \"disabled\" | \"enabled\" | \"executing\";\n}\n\n// Shared UI Components\nconst StepContainer = ({ theme, children }: { theme?: string; children: React.ReactNode }) => (\n  <div \n  data-testid=\"select-steps\"\n  className=\"flex\">\n    <div className={`relative rounded-xl w-[600px] p-6 shadow-lg backdrop-blur-sm ${\n      theme === \"dark\" \n        ? \"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white border border-slate-700/50 shadow-2xl\"\n        : \"bg-gradient-to-br from-white via-gray-50 to-white text-gray-800 border border-gray-200/80\"\n    }`}>\n      {children}\n    </div>\n  </div>\n);\n\nconst StepHeader = ({ \n  theme, \n  enabledCount, \n  totalCount, \n  status, \n  showStatus = false \n}: { \n  theme?: string; \n  enabledCount: number; \n  totalCount: number; \n  status?: string;\n  showStatus?: boolean;\n}) => (\n  <div className=\"mb-5\">\n    <div className=\"flex items-center justify-between mb-3\">\n      <h2 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n        Select Steps\n      </h2>\n      <div className=\"flex items-center gap-3\">\n        <div className={`text-sm ${theme === \"dark\" ? \"text-slate-400\" : \"text-gray-500\"}`}>\n          {enabledCount}/{totalCount} Selected\n        </div>\n        {showStatus && (\n          <div className={`text-xs px-2 py-1 rounded-full font-medium ${\n            status === \"executing\" \n              ? theme === \"dark\" \n                ? \"bg-blue-900/30 text-blue-300 border border-blue-500/30\"\n                : \"bg-blue-50 text-blue-600 border border-blue-200\"\n              : theme === \"dark\"\n                ? \"bg-slate-700 text-slate-300\"\n                : \"bg-gray-100 text-gray-600\"\n          }`}>\n            {status === \"executing\" ? \"Ready\" : \"Waiting\"}\n          </div>\n        )}\n      </div>\n    </div>\n    \n    <div className={`relative h-2 rounded-full overflow-hidden ${theme === \"dark\" ? \"bg-slate-700\" : \"bg-gray-200\"}`}>\n      <div \n        className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-500 ease-out\"\n        style={{ width: `${totalCount > 0 ? (enabledCount / totalCount) * 100 : 0}%` }}\n      />\n    </div>\n  </div>\n);\n\nconst StepItem = ({ \n  step, \n  theme, \n  status, \n  onToggle, \n  disabled = false \n}: { \n  step: { description: string; status: string }; \n  theme?: string; \n  status?: string;\n  onToggle: () => void;\n  disabled?: boolean;\n}) => (\n  <div className={`flex items-center p-3 rounded-lg transition-all duration-300 ${\n    step.status === \"enabled\"\n      ? theme === \"dark\" \n        ? \"bg-gradient-to-r from-blue-900/20 to-purple-900/10 border border-blue-500/30\"\n        : \"bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200/60\"\n      : theme === \"dark\"\n        ? \"bg-slate-800/30 border border-slate-600/30\"\n        : \"bg-gray-50/50 border border-gray-200/40\"\n  }`}>\n    <label \n    data-testid=\"step-item\" \n    className=\"flex items-center cursor-pointer w-full\">\n      <div className=\"relative\">\n        <input\n          type=\"checkbox\"\n          checked={step.status === \"enabled\"}\n          onChange={onToggle}\n          className=\"sr-only\"\n          disabled={disabled}\n        />\n        <div className={`w-5 h-5 rounded border-2 flex items-center justify-center transition-all duration-200 ${\n          step.status === \"enabled\"\n            ? \"bg-gradient-to-br from-blue-500 to-purple-600 border-blue-500\"\n            : theme === \"dark\"\n              ? \"border-slate-400 bg-slate-700\"\n              : \"border-gray-300 bg-white\"\n        } ${disabled ? \"opacity-60\" : \"\"}`}>\n          {step.status === \"enabled\" && (\n            <svg className=\"w-3 h-3 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          )}\n        </div>\n      </div>\n      <span \n       data-testid=\"step-text\"\n       className={`ml-3 font-medium transition-all duration-300 ${\n        step.status !== \"enabled\" && status != \"inProgress\"\n          ? `line-through ${theme === \"dark\" ? \"text-slate-500\" : \"text-gray-400\"}`\n          : theme === \"dark\" ? \"text-white\" : \"text-gray-800\"\n      } ${disabled ? \"opacity-60\" : \"\"}`}>\n        {step.description}\n      </span>\n    </label>\n  </div>\n);\n\nconst ActionButton = ({ \n  variant, \n  theme, \n  disabled, \n  onClick, \n  children \n}: { \n  variant: \"primary\" | \"secondary\" | \"success\" | \"danger\";\n  theme?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n}) => {\n  const baseClasses = \"px-6 py-3 rounded-lg font-semibold transition-all duration-200\";\n  const enabledClasses = \"hover:scale-105 shadow-md hover:shadow-lg\";\n  const disabledClasses = \"opacity-50 cursor-not-allowed\";\n  \n  const variantClasses = {\n    primary: \"bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800 text-white shadow-lg hover:shadow-xl\",\n    secondary: theme === \"dark\"\n      ? \"bg-slate-700 hover:bg-slate-600 text-white border border-slate-600 hover:border-slate-500\"\n      : \"bg-gray-100 hover:bg-gray-200 text-gray-800 border border-gray-300 hover:border-gray-400\",\n    success: \"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl\",\n    danger: \"bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-lg hover:shadow-xl\"\n  };\n\n  return (\n    <button\n      className={`${baseClasses} ${disabled ? disabledClasses : enabledClasses} ${\n        disabled && variant === \"secondary\" ? \"bg-gray-200 text-gray-500\" : \n        disabled && variant === \"success\" ? \"bg-gray-400\" :\n        variantClasses[variant]\n      }`}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst DecorativeElements = ({ \n  theme, \n  variant = \"default\" \n}: { \n  theme?: string; \n  variant?: \"default\" | \"success\" | \"danger\" \n}) => (\n  <>\n    <div className={`absolute top-3 right-3 w-16 h-16 rounded-full blur-xl ${\n      variant === \"success\"\n        ? theme === \"dark\" \n          ? \"bg-gradient-to-br from-green-500/10 to-emerald-500/10\" \n          : \"bg-gradient-to-br from-green-200/30 to-emerald-200/30\"\n        : variant === \"danger\"\n          ? theme === \"dark\" \n            ? \"bg-gradient-to-br from-red-500/10 to-pink-500/10\" \n            : \"bg-gradient-to-br from-red-200/30 to-pink-200/30\"\n          : theme === \"dark\" \n            ? \"bg-gradient-to-br from-blue-500/10 to-purple-500/10\" \n            : \"bg-gradient-to-br from-blue-200/30 to-purple-200/30\"\n    }`} />\n    <div className={`absolute bottom-3 left-3 w-12 h-12 rounded-full blur-xl ${\n      variant === \"default\"\n        ? theme === \"dark\" \n          ? \"bg-gradient-to-br from-purple-500/10 to-pink-500/10\" \n          : \"bg-gradient-to-br from-purple-200/30 to-pink-200/30\"\n        : \"opacity-50\"\n    }`} />\n  </>\n);\nconst InterruptHumanInTheLoop: React.FC<{\n  event: { value: { steps: Step[] } };\n  resolve: (value: string) => void;\n}> = ({ event, resolve }) => {\n  const { theme } = useTheme();\n  \n  // Parse and initialize steps data\n  let initialSteps: Step[] = [];\n  if (event.value && event.value.steps && Array.isArray(event.value.steps)) {\n    initialSteps = event.value.steps.map((step: any) => ({\n      description: typeof step === \"string\" ? step : step.description || \"\",\n      status: typeof step === \"object\" && step.status ? step.status : \"enabled\",\n    }));\n  }\n\n  const [localSteps, setLocalSteps] = useState<Step[]>(initialSteps);\n  const enabledCount = localSteps.filter(step => step.status === \"enabled\").length;\n\n  const handleStepToggle = (index: number) => {\n    setLocalSteps((prevSteps) =>\n      prevSteps.map((step, i) =>\n        i === index\n          ? { ...step, status: step.status === \"enabled\" ? \"disabled\" : \"enabled\" }\n          : step,\n      ),\n    );\n  };\n\n  const handlePerformSteps = () => {\n    const selectedSteps = localSteps\n      .filter((step) => step.status === \"enabled\")\n      .map((step) => step.description);\n    resolve(\"The user selected the following steps: \" + selectedSteps.join(\", \"));\n  };\n\n  return (\n    <StepContainer theme={theme}>\n      <StepHeader theme={theme} enabledCount={enabledCount} totalCount={localSteps.length} />\n      \n      <div className=\"space-y-3 mb-6\">\n        {localSteps.map((step, index) => (\n          <StepItem\n            key={index}\n            step={step}\n            theme={theme}\n            onToggle={() => handleStepToggle(index)}\n          />\n        ))}\n      </div>\n\n      <div className=\"flex justify-center\">\n        <ActionButton\n          variant=\"primary\"\n          theme={theme}\n          onClick={handlePerformSteps}\n        >\n          <span className=\"text-lg\">✨</span>\n          Perform Steps\n          <span className={`ml-1 px-2 py-1 rounded-full text-xs font-bold ${\n            theme === \"dark\" ? \"bg-purple-800/50\" : \"bg-purple-600/20\"\n          }`}>\n            {enabledCount}\n          </span>\n        </ActionButton>\n      </div>\n\n      <DecorativeElements theme={theme} />\n    </StepContainer>\n  );\n};\n\nconst Chat = ({ integrationId }: { integrationId: string }) => {\n  // Langgraph uses it's own hook to handle human-in-the-loop interactions via langgraph interrupts,\n  // This hook won't do anything for other integrations.\n  useLangGraphInterrupt({\n    render: ({ event, resolve }) => <InterruptHumanInTheLoop event={event} resolve={resolve} />,\n  });\n  useCopilotAction({\n    name: \"generate_task_steps\",\n    description: \"Generates a list of steps for the user to perform\",\n    parameters: [\n      {\n        name: \"steps\",\n        type: \"object[]\",\n        attributes: [\n          {\n            name: \"description\",\n            type: \"string\",\n          },\n          {\n            name: \"status\",\n            type: \"string\",\n            enum: [\"enabled\", \"disabled\", \"executing\"],\n          },\n        ],\n      },\n    ],\n    // Langgraph uses it's own hook to handle human-in-the-loop interactions via langgraph interrupts,\n    // so don't use this action for langgraph integration.\n    available: ['langgraph', 'langgraph-fastapi', 'langgraph-typescript'].includes(integrationId) ? 'disabled' : 'enabled',\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      return <StepsFeedback args={args} respond={respond} status={status} />;\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-full w-full\">\n      <div className=\"h-full w-full md:w-8/10 md:h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-2xl\"\n          labels={{\n            initial:\n              \"Hi, I'm an agent specialized in helping you with your tasks. How can I help you?\",\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst StepsFeedback = ({ args, respond, status }: { args: any; respond: any; status: any }) => {\n  const { theme } = useTheme();\n  const [localSteps, setLocalSteps] = useState<Step[]>([]);\n  const [accepted, setAccepted] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    if (status === \"executing\" && localSteps.length === 0) {\n      setLocalSteps(args.steps);\n    }\n  }, [status, args.steps, localSteps]);\n\n  if (args.steps === undefined || args.steps.length === 0) {\n    return <></>;\n  }\n\n  const steps = localSteps.length > 0 ? localSteps : args.steps;\n  const enabledCount = steps.filter((step: any) => step.status === \"enabled\").length;\n\n  const handleStepToggle = (index: number) => {\n    setLocalSteps((prevSteps) =>\n      prevSteps.map((step, i) =>\n        i === index\n          ? { ...step, status: step.status === \"enabled\" ? \"disabled\" : \"enabled\" }\n          : step,\n      ),\n    );\n  };\n\n  const handleReject = () => {\n    if (respond) {\n      setAccepted(false);\n      respond({ accepted: false });\n    }\n  };\n\n  const handleConfirm = () => {\n    if (respond) {\n      setAccepted(true);\n      respond({ accepted: true, steps: localSteps.filter(step => step.status === \"enabled\")});\n    }\n  };\n\n  return (\n    <StepContainer theme={theme}>\n      <StepHeader \n        theme={theme} \n        enabledCount={enabledCount} \n        totalCount={steps.length} \n        status={status}\n        showStatus={true}\n      />\n      \n      <div className=\"space-y-3 mb-6\">\n        {steps.map((step: any, index: any) => (\n          <StepItem\n            key={index}\n            step={step}\n            theme={theme}\n            status={status}\n            onToggle={() => handleStepToggle(index)}\n            disabled={status !== \"executing\"}\n          />\n        ))}\n      </div>\n\n      {/* Action Buttons - Different logic from InterruptHumanInTheLoop */}\n      {accepted === null && (\n        <div className=\"flex justify-center gap-4\">\n          <ActionButton\n            variant=\"secondary\"\n            theme={theme}\n            disabled={status !== \"executing\"}\n            onClick={handleReject}\n          >\n            <span className=\"mr-2\">✗</span>\n            Reject\n          </ActionButton>\n          <ActionButton\n            variant=\"success\"\n            theme={theme}\n            disabled={status !== \"executing\"}\n            onClick={handleConfirm}\n          >\n            <span className=\"mr-2\">✓</span>\n            Confirm\n            <span className={`ml-2 px-2 py-1 rounded-full text-xs font-bold ${\n              theme === \"dark\" ? \"bg-green-800/50\" : \"bg-green-600/20\"\n            }`}>\n              {enabledCount}\n            </span>\n          </ActionButton>\n        </div>\n      )}\n\n      {/* Result State - Unique to StepsFeedback */}\n      {accepted !== null && (\n        <div className=\"flex justify-center\">\n          <div className={`px-6 py-3 rounded-lg font-semibold flex items-center gap-2 ${\n            accepted \n              ? theme === \"dark\"\n                ? \"bg-green-900/30 text-green-300 border border-green-500/30\"\n                : \"bg-green-50 text-green-700 border border-green-200\"\n              : theme === \"dark\"\n                ? \"bg-red-900/30 text-red-300 border border-red-500/30\"\n                : \"bg-red-50 text-red-700 border border-red-200\"\n          }`}>\n            <span className=\"text-lg\">{accepted ? \"✓\" : \"✗\"}</span>\n            {accepted ? \"Accepted\" : \"Rejected\"}\n          </div>\n        </div>\n      )}\n\n      <DecorativeElements theme={theme} variant={\n        accepted === true ? \"success\" : accepted === false ? \"danger\" : \"default\"\n      } />\n    </StepContainer>\n  );\n};\n\n\nexport default HumanInTheLoop;\n",
      "language": "typescript",
      "type": "file"
    },
    {
      "name": "style.css",
      "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
      "language": "css",
      "type": "file"
    },
    {
      "name": "README.mdx",
      "content": "# 🤝 Human-in-the-Loop Task Planner\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **human-in-the-loop** capabilities:\n\n1. **Collaborative Planning**: The Copilot generates task steps and lets you\n   decide which ones to perform\n2. **Interactive Decision Making**: Select or deselect steps to customize the\n   execution plan\n3. **Adaptive Responses**: The Copilot adapts its execution based on your\n   choices, even handling missing steps\n\n## How to Interact\n\nTry these steps to experience the demo:\n\n1. Ask your Copilot to help with a task, such as:\n\n   - \"Make me a sandwich\"\n   - \"Plan a weekend trip\"\n   - \"Organize a birthday party\"\n   - \"Start a garden\"\n\n2. Review the suggested steps provided by your Copilot\n\n3. Select or deselect steps using the checkboxes to customize the plan\n\n   - Try removing essential steps to see how the Copilot adapts!\n\n4. Click \"Execute Plan\" to see the outcome based on your selections\n\n## ✨ Human-in-the-Loop Magic in Action\n\n**What's happening technically:**\n\n- The agent analyzes your request and breaks it down into logical steps\n- These steps are presented to you through a dynamic UI component\n- Your selections are captured as user input\n- The agent considers your choices when executing the plan\n- The agent adapts to missing steps with creative problem-solving\n\n**What you'll see in this demo:**\n\n- The Copilot provides a detailed, step-by-step plan for your task\n- You have complete control over which steps to include\n- If you remove essential steps, the Copilot provides entertaining and creative\n  workarounds\n- The final execution reflects your choices, showing how human input shapes the\n  outcome\n- Each response is tailored to your specific selections\n\nThis human-in-the-loop pattern creates a powerful collaborative experience where\nboth human judgment and AI capabilities work together to achieve better results\nthan either could alone!\n",
      "language": "markdown",
      "type": "file"
    },
    {
      "name": "human_in_the_loop.py",
      "content": "from typing import Literal, List\nfrom pydantic import BaseModel\n\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.protocols.ag_ui.router import get_ag_ui_workflow_router\n\n\n\nclass Step(BaseModel):\n    description: str\n    status: Literal[\"enabled\", \"disabled\", \"executing\"]\n\n\ndef generate_task_steps(steps: List[Step]) -> str:\n    return f\"Generated {len(steps)} steps\"\n\n\nhuman_in_the_loop_router = get_ag_ui_workflow_router(\n    llm=OpenAI(model=\"gpt-4.1\"),\n    frontend_tools=[generate_task_steps],\n)\n",
      "language": "python",
      "type": "file"
    }
  ],
  "llama-index::agentic_generative_ui": [
    {
      "name": "page.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport { useTheme } from \"next-themes\";\n\ninterface AgenticGenerativeUIProps {\n  params: Promise<{\n    integrationId: string;\n  }>;\n}\n\nconst AgenticGenerativeUI: React.FC<AgenticGenerativeUIProps> = ({ params }) => {\n  const { integrationId } = React.use(params);\n  return (\n    <CopilotKit\n      runtimeUrl={`/api/copilotkit/${integrationId}`}\n      showDevConsole={false}\n      // agent lock to the relevant agent\n      agent=\"agentic_generative_ui\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\ninterface AgentState {\n  steps: {\n    description: string;\n    status: \"pending\" | \"completed\";\n  }[];\n}\n\nconst Chat = () => {\n  const { theme } = useTheme();\n  useCoAgentStateRender<AgentState>({\n    name: \"agentic_generative_ui\",\n    render: ({ state }) => {\n      if (!state.steps || state.steps.length === 0) {\n        return null;\n      }\n\n      const completedCount = state.steps.filter(step => step.status === \"completed\").length;\n      const progressPercentage = (completedCount / state.steps.length) * 100;\n\n      return (\n        <div className=\"flex\">\n          <div \n          data-testid=\"task-progress\"\n          className={`relative rounded-xl w-[700px] p-6 shadow-lg backdrop-blur-sm ${\n            theme === \"dark\" \n              ? \"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white border border-slate-700/50 shadow-2xl\"\n              : \"bg-gradient-to-br from-white via-gray-50 to-white text-gray-800 border border-gray-200/80\"\n          }`}>\n            {/* Header */}\n            <div className=\"mb-5\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  Task Progress\n                </h3>\n                <div className={`text-sm ${theme === \"dark\" ? \"text-slate-400\" : \"text-gray-500\"}`}>\n                  {completedCount}/{state.steps.length} Complete\n                </div>\n              </div>\n              \n              {/* Progress Bar */}\n              <div className={`relative h-2 rounded-full overflow-hidden ${theme === \"dark\" ? \"bg-slate-700\" : \"bg-gray-200\"}`}>\n                <div \n                  className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-1000 ease-out\"\n                  style={{ width: `${progressPercentage}%` }}\n                />\n                <div className={`absolute top-0 left-0 h-full w-full bg-gradient-to-r from-transparent to-transparent animate-pulse ${\n                  theme === \"dark\" ? \"via-white/20\" : \"via-white/40\"\n                }`} />\n              </div>\n            </div>\n\n            {/* Steps */}\n            <div className=\"space-y-2\">\n              {state.steps.map((step, index) => {\n                const isCompleted = step.status === \"completed\";\n                const isCurrentPending = step.status === \"pending\" && \n                  index === state.steps.findIndex((s) => s.status === \"pending\");\n                const isFuturePending = step.status === \"pending\" && !isCurrentPending;\n\n                return (\n                  <div \n                    key={index} \n                    className={`relative flex items-center p-2.5 rounded-lg transition-all duration-500 ${\n                      isCompleted \n                        ? theme === \"dark\" \n                          ? \"bg-gradient-to-r from-green-900/30 to-emerald-900/20 border border-green-500/30\"\n                          : \"bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200/60\"\n                        : isCurrentPending\n                        ? theme === \"dark\"\n                          ? \"bg-gradient-to-r from-blue-900/40 to-purple-900/30 border border-blue-500/50 shadow-lg shadow-blue-500/20\"\n                          : \"bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200/60 shadow-md shadow-blue-200/50\"\n                        : theme === \"dark\"\n                          ? \"bg-slate-800/50 border border-slate-600/30\"\n                          : \"bg-gray-50/50 border border-gray-200/60\"\n                    }`}\n                  >\n                    {/* Connector Line */}\n                    {index < state.steps.length - 1 && (\n                      <div className={`absolute left-5 top-full w-0.5 h-2 bg-gradient-to-b ${\n                        theme === \"dark\" ? \"from-slate-500 to-slate-600\" : \"from-gray-300 to-gray-400\"\n                      }`} />\n                    )}\n\n                    {/* Status Icon */}\n                    <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mr-2 ${\n                      isCompleted \n                        ? theme === \"dark\"\n                          ? \"bg-gradient-to-br from-green-500 to-emerald-600 shadow-lg shadow-green-500/30\"\n                          : \"bg-gradient-to-br from-green-500 to-emerald-600 shadow-md shadow-green-200\"\n                        : isCurrentPending\n                        ? theme === \"dark\"\n                          ? \"bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg shadow-blue-500/30\"\n                          : \"bg-gradient-to-br from-blue-500 to-purple-600 shadow-md shadow-blue-200\"\n                        : theme === \"dark\"\n                          ? \"bg-slate-700 border border-slate-600\"\n                          : \"bg-gray-300 border border-gray-400\"\n                    }`}>\n                      {isCompleted ? (\n                        <CheckIcon />\n                      ) : isCurrentPending ? (\n                        <SpinnerIcon />\n                      ) : (\n                        <ClockIcon theme={theme} />\n                      )}\n                    </div>\n\n                    {/* Step Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div \n                      data-testid=\"task-step-text\"\n                      className={`font-semibold transition-all duration-300 text-sm ${\n                        isCompleted \n                          ? theme === \"dark\" ? \"text-green-300\" : \"text-green-700\"\n                          : isCurrentPending\n                          ? theme === \"dark\" ? \"text-blue-300 text-base\" : \"text-blue-700 text-base\"\n                          : theme === \"dark\" ? \"text-slate-400\" : \"text-gray-500\"\n                      }`}>\n                        {step.description}\n                      </div>\n                      {isCurrentPending && (\n                        <div className={`text-sm mt-1 animate-pulse ${\n                          theme === \"dark\" ? \"text-blue-400\" : \"text-blue-600\"\n                        }`}>\n                          Processing...\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Animated Background for Current Step */}\n                    {isCurrentPending && (\n                      <div className={`absolute inset-0 rounded-lg bg-gradient-to-r animate-pulse ${\n                        theme === \"dark\" \n                          ? \"from-blue-500/10 to-purple-500/10\" \n                          : \"from-blue-100/50 to-purple-100/50\"\n                      }`} />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Decorative Elements */}\n            <div className={`absolute top-3 right-3 w-16 h-16 rounded-full blur-xl ${\n              theme === \"dark\" \n                ? \"bg-gradient-to-br from-blue-500/10 to-purple-500/10\" \n                : \"bg-gradient-to-br from-blue-200/30 to-purple-200/30\"\n            }`} />\n            <div className={`absolute bottom-3 left-3 w-12 h-12 rounded-full blur-xl ${\n              theme === \"dark\" \n                ? \"bg-gradient-to-br from-green-500/10 to-emerald-500/10\" \n                : \"bg-gradient-to-br from-green-200/30 to-emerald-200/30\"\n            }`} />\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-full w-full\">\n      <div className=\"h-full w-full md:w-8/10 md:h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-2xl\"\n          labels={{\n            initial:\n              \"Hi, I'm an agent! I can help you with anything you need and will show you progress as I work. What can I do for you?\",\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Enhanced Icons\nfunction CheckIcon() {\n  return (\n    <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n    </svg>\n  );\n}\n\nfunction SpinnerIcon() {\n  return (\n    <svg\n      className=\"w-4 h-4 animate-spin text-white\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n}\n\nfunction ClockIcon({ theme }: { theme?: string }) {\n  return (\n    <svg className={`w-3 h-3 ${theme === \"dark\" ? \"text-slate-400\" : \"text-gray-600\"}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <circle cx=\"12\" cy=\"12\" r=\"10\" strokeWidth=\"2\"/>\n      <polyline points=\"12,6 12,12 16,14\" strokeWidth=\"2\"/>\n    </svg>\n  );\n}\n\nexport default AgenticGenerativeUI;\n",
      "language": "typescript",
      "type": "file"
    },
    {
      "name": "style.css",
      "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
      "language": "css",
      "type": "file"
    },
    {
      "name": "README.mdx",
      "content": "# 🚀 Agentic Generative UI Task Executor\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic generative UI** capabilities:\n\n1. **Real-time Status Updates**: The Copilot provides live feedback as it works\n   through complex tasks\n2. **Long-running Task Execution**: See how agents can handle extended processes\n   with continuous feedback\n3. **Dynamic UI Generation**: The interface updates in real-time to reflect the\n   agent's progress\n\n## How to Interact\n\nSimply ask your Copilot to perform any moderately complex task:\n\n- \"Make me a sandwich\"\n- \"Plan a vacation to Japan\"\n- \"Create a weekly workout routine\"\n\nThe Copilot will break down the task into steps and begin \"executing\" them,\nproviding real-time status updates as it progresses.\n\n## ✨ Agentic Generative UI in Action\n\n**What's happening technically:**\n\n- The agent analyzes your request and creates a detailed execution plan\n- Each step is processed sequentially with realistic timing\n- Status updates are streamed to the frontend using CopilotKit's streaming\n  capabilities\n- The UI dynamically renders these updates without page refreshes\n- The entire flow is managed by the agent, requiring no manual intervention\n\n**What you'll see in this demo:**\n\n- The Copilot breaks your task into logical steps\n- A status indicator shows the current progress\n- Each step is highlighted as it's being executed\n- Detailed status messages explain what's happening at each moment\n- Upon completion, you receive a summary of the task execution\n\nThis pattern of providing real-time progress for long-running tasks is perfect\nfor scenarios where users benefit from transparency into complex processes -\nfrom data analysis to content creation, system configurations, or multi-stage\nworkflows!\n",
      "language": "markdown",
      "type": "file"
    },
    {
      "name": "agentic_generative_ui.py",
      "content": "import asyncio\nimport copy\nimport jsonpatch\nfrom pydantic import BaseModel\n\nfrom llama_index.core.workflow import Context\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.protocols.ag_ui.router import get_ag_ui_workflow_router\nfrom llama_index.protocols.ag_ui.events import StateDeltaWorkflowEvent, StateSnapshotWorkflowEvent\n\nclass Step(BaseModel):\n    description: str\n\nclass Task(BaseModel):\n    steps: list[Step]\n\n# Genrative UI demo\nasync def run_task(\n    ctx: Context, task: Task,\n) -> str:\n    \"\"\"Execute any list of steps needed to complete a task. Useful for anything the user wants to do.\"\"\"\n\n    async with ctx.store.edit_state() as global_state:\n        state = global_state.get(\"state\", {})\n        task = Task.model_validate(task)\n\n        state = {\n            \"steps\": [\n                {\n                    \"description\": step.description,\n                    \"status\": \"pending\"\n                }\n                for step in task.steps\n            ]\n        }\n\n        # Send initial state snapshot\n        ctx.write_event_to_stream(\n            StateSnapshotWorkflowEvent(\n                snapshot=state\n            )\n        )\n\n        # Sleep for 1 second\n        await asyncio.sleep(1.0)\n\n        # Create a copy to track changes for JSON patches\n        previous_state = copy.deepcopy(state)\n\n        # Update each step and send deltas\n        for i, step in enumerate(state[\"steps\"]):\n            step[\"status\"] = \"completed\"\n            \n            # Generate JSON patch from previous state to current state\n            patch = jsonpatch.make_patch(previous_state, state)\n            \n            # Send state delta event\n            ctx.write_event_to_stream(\n                StateDeltaWorkflowEvent(\n                    delta=patch.patch\n                )\n            )\n            \n            # Update previous state for next iteration\n            previous_state = copy.deepcopy(state)\n            \n            # Sleep for 1 second\n            await asyncio.sleep(1.0)\n\n        # Optionally send a final snapshot to the client\n        ctx.write_event_to_stream(\n            StateSnapshotWorkflowEvent(\n                snapshot=state\n            )\n        )\n\n        global_state[\"state\"] = state\n\n    return \"Task Done!\"\n\n\nagentic_generative_ui_router = get_ag_ui_workflow_router(\n    llm=OpenAI(model=\"gpt-4.1\"),\n    backend_tools=[run_task],\n    initial_state={},\n    system_prompt=(\n        \"You are a helpful assistant that can help the user with their task. \"\n        \"If the user asks you to do any task, use the run_task tool to do it. \"\n        \"Use your best judgement to describe the steps.\"\n    )\n)\n",
      "language": "python",
      "type": "file"
    }
  ],
  "llama-index::shared_state": [
    {
      "name": "page.tsx",
      "content": "\"use client\";\nimport { CopilotKit, useCoAgent, useCopilotChat } from \"@copilotkit/react-core\";\nimport { CopilotChat, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { useMobileView } from \"@/utils/use-mobile-view\";\nimport { useMobileChat } from \"@/utils/use-mobile-chat\";\n\ninterface SharedStateProps {\n  params: Promise<{\n    integrationId: string;\n  }>;\n}\n\nexport default function SharedState({ params }: SharedStateProps) {\n  const { integrationId } = React.use(params);\n  const { isMobile } = useMobileView();\n  const defaultChatHeight = 50\n  const {\n    isChatOpen,\n    setChatHeight,\n    setIsChatOpen,\n    isDragging,\n    chatHeight,\n    handleDragStart\n  } = useMobileChat(defaultChatHeight)\n\n  const chatTitle = 'AI Recipe Assistant'\n  const chatDescription = 'Ask me to craft recipes'\n  const initialLabel = 'Hi 👋 How can I help with your recipe?'\n\n  return (\n    <CopilotKit\n      runtimeUrl={`/api/copilotkit/${integrationId}`}\n      showDevConsole={false}\n      // agent lock to the relevant agent\n      agent=\"shared_state\"\n    >\n      <div\n        className=\"min-h-screen w-full flex items-center justify-center\"\n        style={\n          {\n            backgroundImage: \"url('/shared_state_background.png')\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            backgroundRepeat: \"no-repeat\",\n          } as React.CSSProperties\n        }\n      >\n        <Recipe />\n        {isMobile ? (\n          <>\n            {/* Chat Toggle Button */}\n            <div className=\"fixed bottom-0 left-0 right-0 z-50\">\n              <div className=\"bg-gradient-to-t from-white via-white to-transparent h-6\"></div>\n              <div\n                className=\"bg-white border-t border-gray-200 px-4 py-3 flex items-center justify-between cursor-pointer shadow-lg\"\n                onClick={() => {\n                  if (!isChatOpen) {\n                    setChatHeight(defaultChatHeight); // Reset to good default when opening\n                  }\n                  setIsChatOpen(!isChatOpen);\n                }}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div>\n                    <div className=\"font-medium text-gray-900\">{chatTitle}</div>\n                    <div className=\"text-sm text-gray-500\">{chatDescription}</div>\n                  </div>\n                </div>\n                <div className={`transform transition-transform duration-300 ${isChatOpen ? 'rotate-180' : ''}`}>\n                  <svg className=\"w-6 h-6 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n\n            {/* Pull-Up Chat Container */}\n            <div\n              className={`fixed inset-x-0 bottom-0 z-40 bg-white rounded-t-2xl shadow-[0px_0px_20px_0px_rgba(0,0,0,0.15)] transform transition-all duration-300 ease-in-out flex flex-col ${\n                isChatOpen ? 'translate-y-0' : 'translate-y-full'\n              } ${isDragging ? 'transition-none' : ''}`}\n              style={{\n                height: `${chatHeight}vh`,\n                paddingBottom: 'env(safe-area-inset-bottom)' // Handle iPhone bottom padding\n              }}\n            >\n              {/* Drag Handle Bar */}\n              <div\n                className=\"flex justify-center pt-3 pb-2 flex-shrink-0 cursor-grab active:cursor-grabbing\"\n                onMouseDown={handleDragStart}\n              >\n                <div className=\"w-12 h-1 bg-gray-400 rounded-full hover:bg-gray-500 transition-colors\"></div>\n              </div>\n\n              {/* Chat Header */}\n              <div className=\"px-4 py-3 border-b border-gray-100 flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"font-semibold text-gray-900\">{chatTitle}</h3>\n                  </div>\n                  <button\n                    onClick={() => setIsChatOpen(false)}\n                    className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n\n              {/* Chat Content - Flexible container for messages and input */}\n              <div className=\"flex-1 flex flex-col min-h-0 overflow-hidden pb-16\">\n                <CopilotChat\n                  className=\"h-full flex flex-col\"\n                  labels={{\n                    initial: initialLabel,\n                  }}\n                />\n              </div>\n            </div>\n\n            {/* Backdrop */}\n            {isChatOpen && (\n              <div\n                className=\"fixed inset-0 z-30\"\n                onClick={() => setIsChatOpen(false)}\n              />\n            )}\n          </>\n        ) : (\n          <CopilotSidebar\n            defaultOpen={true}\n            labels={{\n              title: chatTitle,\n              initial: initialLabel,\n            }}\n            clickOutsideToClose={false}\n          />\n        )}\n      </div>\n    </CopilotKit>\n  );\n}\n\nenum SkillLevel {\n  BEGINNER = \"Beginner\",\n  INTERMEDIATE = \"Intermediate\",\n  ADVANCED = \"Advanced\",\n}\n\nenum CookingTime {\n  FiveMin = \"5 min\",\n  FifteenMin = \"15 min\",\n  ThirtyMin = \"30 min\",\n  FortyFiveMin = \"45 min\",\n  SixtyPlusMin = \"60+ min\",\n}\n\nconst cookingTimeValues = [\n  { label: CookingTime.FiveMin, value: 0 },\n  { label: CookingTime.FifteenMin, value: 1 },\n  { label: CookingTime.ThirtyMin, value: 2 },\n  { label: CookingTime.FortyFiveMin, value: 3 },\n  { label: CookingTime.SixtyPlusMin, value: 4 },\n];\n\nenum SpecialPreferences {\n  HighProtein = \"High Protein\",\n  LowCarb = \"Low Carb\",\n  Spicy = \"Spicy\",\n  BudgetFriendly = \"Budget-Friendly\",\n  OnePotMeal = \"One-Pot Meal\",\n  Vegetarian = \"Vegetarian\",\n  Vegan = \"Vegan\",\n}\n\ninterface Ingredient {\n  icon: string;\n  name: string;\n  amount: string;\n}\n\ninterface Recipe {\n  title: string;\n  skill_level: SkillLevel;\n  cooking_time: CookingTime;\n  special_preferences: string[];\n  ingredients: Ingredient[];\n  instructions: string[];\n}\n\ninterface RecipeAgentState {\n  recipe: Recipe;\n}\n\nconst INITIAL_STATE: RecipeAgentState = {\n  recipe: {\n    title: \"Make Your Recipe\",\n    skill_level: SkillLevel.INTERMEDIATE,\n    cooking_time: CookingTime.FortyFiveMin,\n    special_preferences: [],\n    ingredients: [\n      { icon: \"🥕\", name: \"Carrots\", amount: \"3 large, grated\" },\n      { icon: \"🌾\", name: \"All-Purpose Flour\", amount: \"2 cups\" },\n    ],\n    instructions: [\"Preheat oven to 350°F (175°C)\"],\n  },\n};\n\nfunction Recipe() {\n  const { isMobile } = useMobileView();\n  const { state: agentState, setState: setAgentState } = useCoAgent<RecipeAgentState>({\n    name: \"shared_state\",\n    initialState: INITIAL_STATE,\n  });\n\n  const [recipe, setRecipe] = useState(INITIAL_STATE.recipe);\n  const { appendMessage, isLoading } = useCopilotChat();\n  const [editingInstructionIndex, setEditingInstructionIndex] = useState<number | null>(null);\n  const newInstructionRef = useRef<HTMLTextAreaElement>(null);\n\n  const updateRecipe = (partialRecipe: Partial<Recipe>) => {\n    setAgentState({\n      ...agentState,\n      recipe: {\n        ...recipe,\n        ...partialRecipe,\n      },\n    });\n    setRecipe({\n      ...recipe,\n      ...partialRecipe,\n    });\n  };\n\n  const newRecipeState = { ...recipe };\n  const newChangedKeys = [];\n  const changedKeysRef = useRef<string[]>([]);\n\n  for (const key in recipe) {\n    if (\n      agentState &&\n      agentState.recipe &&\n      (agentState.recipe as any)[key] !== undefined &&\n      (agentState.recipe as any)[key] !== null\n    ) {\n      let agentValue = (agentState.recipe as any)[key];\n      const recipeValue = (recipe as any)[key];\n\n      // Check if agentValue is a string and replace \\n with actual newlines\n      if (typeof agentValue === \"string\") {\n        agentValue = agentValue.replace(/\\\\n/g, \"\\n\");\n      }\n\n      if (JSON.stringify(agentValue) !== JSON.stringify(recipeValue)) {\n        (newRecipeState as any)[key] = agentValue;\n        newChangedKeys.push(key);\n      }\n    }\n  }\n\n  if (newChangedKeys.length > 0) {\n    changedKeysRef.current = newChangedKeys;\n  } else if (!isLoading) {\n    changedKeysRef.current = [];\n  }\n\n  useEffect(() => {\n    setRecipe(newRecipeState);\n  }, [JSON.stringify(newRecipeState)]);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateRecipe({\n      title: event.target.value,\n    });\n  };\n\n  const handleSkillLevelChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    updateRecipe({\n      skill_level: event.target.value as SkillLevel,\n    });\n  };\n\n  const handleDietaryChange = (preference: string, checked: boolean) => {\n    if (checked) {\n      updateRecipe({\n        special_preferences: [...recipe.special_preferences, preference],\n      });\n    } else {\n      updateRecipe({\n        special_preferences: recipe.special_preferences.filter((p) => p !== preference),\n      });\n    }\n  };\n\n  const handleCookingTimeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    updateRecipe({\n      cooking_time: cookingTimeValues[Number(event.target.value)].label,\n    });\n  };\n\n  const addIngredient = () => {\n    // Pick a random food emoji from our valid list\n    updateRecipe({\n      ingredients: [...recipe.ingredients, { icon: \"🍴\", name: \"\", amount: \"\" }],\n    });\n  };\n\n  const updateIngredient = (index: number, field: keyof Ingredient, value: string) => {\n    const updatedIngredients = [...recipe.ingredients];\n    updatedIngredients[index] = {\n      ...updatedIngredients[index],\n      [field]: value,\n    };\n    updateRecipe({ ingredients: updatedIngredients });\n  };\n\n  const removeIngredient = (index: number) => {\n    const updatedIngredients = [...recipe.ingredients];\n    updatedIngredients.splice(index, 1);\n    updateRecipe({ ingredients: updatedIngredients });\n  };\n\n  const addInstruction = () => {\n    const newIndex = recipe.instructions.length;\n    updateRecipe({\n      instructions: [...recipe.instructions, \"\"],\n    });\n    // Set the new instruction as the editing one\n    setEditingInstructionIndex(newIndex);\n\n    // Focus the new instruction after render\n    setTimeout(() => {\n      const textareas = document.querySelectorAll(\".instructions-container textarea\");\n      const newTextarea = textareas[textareas.length - 1] as HTMLTextAreaElement;\n      if (newTextarea) {\n        newTextarea.focus();\n      }\n    }, 50);\n  };\n\n  const updateInstruction = (index: number, value: string) => {\n    const updatedInstructions = [...recipe.instructions];\n    updatedInstructions[index] = value;\n    updateRecipe({ instructions: updatedInstructions });\n  };\n\n  const removeInstruction = (index: number) => {\n    const updatedInstructions = [...recipe.instructions];\n    updatedInstructions.splice(index, 1);\n    updateRecipe({ instructions: updatedInstructions });\n  };\n\n  // Simplified icon handler that defaults to a fork/knife for any problematic icons\n  const getProperIcon = (icon: string | undefined): string => {\n    // If icon is undefined  return the default\n    if (!icon) {\n      return \"🍴\";\n    }\n\n    return icon;\n  };\n\n  return (\n    <form \n    data-testid=\"recipe-card\"\n    style={isMobile ? { marginBottom: \"100px\" } : {}}\n    className=\"recipe-card\">\n      {/* Recipe Title */}\n      <div className=\"recipe-header\">\n        <input\n          type=\"text\"\n          value={recipe.title || \"\"}\n          onChange={handleTitleChange}\n          className=\"recipe-title-input\"\n        />\n\n        <div className=\"recipe-meta\">\n          <div className=\"meta-item\">\n            <span className=\"meta-icon\">🕒</span>\n            <select\n              className=\"meta-select\"\n              value={cookingTimeValues.find((t) => t.label === recipe.cooking_time)?.value || 3}\n              onChange={handleCookingTimeChange}\n              style={{\n                backgroundImage:\n                  \"url(\\\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23555' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\\\")\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"right 0px center\",\n                backgroundSize: \"12px\",\n                appearance: \"none\",\n                WebkitAppearance: \"none\",\n              }}\n            >\n              {cookingTimeValues.map((time) => (\n                <option key={time.value} value={time.value}>\n                  {time.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"meta-item\">\n            <span className=\"meta-icon\">🏆</span>\n            <select\n              className=\"meta-select\"\n              value={recipe.skill_level}\n              onChange={handleSkillLevelChange}\n              style={{\n                backgroundImage:\n                  \"url(\\\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23555' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\\\")\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"right 0px center\",\n                backgroundSize: \"12px\",\n                appearance: \"none\",\n                WebkitAppearance: \"none\",\n              }}\n            >\n              {Object.values(SkillLevel).map((level) => (\n                <option key={level} value={level}>\n                  {level}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Dietary Preferences */}\n      <div className=\"section-container relative\">\n        {changedKeysRef.current.includes(\"special_preferences\") && <Ping />}\n        <h2 className=\"section-title\">Dietary Preferences</h2>\n        <div className=\"dietary-options\">\n          {Object.values(SpecialPreferences).map((option) => (\n            <label key={option} className=\"dietary-option\">\n              <input\n                type=\"checkbox\"\n                checked={recipe.special_preferences.includes(option)}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleDietaryChange(option, e.target.checked)\n                }\n              />\n              <span>{option}</span>\n            </label>\n          ))}\n        </div>\n      </div>\n\n      {/* Ingredients */}\n      <div className=\"section-container relative\">\n        {changedKeysRef.current.includes(\"ingredients\") && <Ping />}\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">Ingredients</h2>\n          <button\n            data-testid=\"add-ingredient-button\"\n            type=\"button\"\n            className=\"add-button\"\n            onClick={addIngredient}\n          >\n            + Add Ingredient\n          </button>\n        </div>\n        <div\n          data-testid=\"ingredients-container\"\n          className=\"ingredients-container\"\n        >\n          {recipe.ingredients.map((ingredient, index) => (\n            <div key={index} \n             data-testid=\"ingredient-card\"\n             className=\"ingredient-card\">\n              <div className=\"ingredient-icon\">{getProperIcon(ingredient.icon)}</div>\n              <div className=\"ingredient-content\">\n                <input\n                  type=\"text\"\n                  value={ingredient.name || \"\"}\n                  onChange={(e) => updateIngredient(index, \"name\", e.target.value)}\n                  placeholder=\"Ingredient name\"\n                  className=\"ingredient-name-input\"\n                />\n                <input\n                  type=\"text\"\n                  value={ingredient.amount || \"\"}\n                  onChange={(e) => updateIngredient(index, \"amount\", e.target.value)}\n                  placeholder=\"Amount\"\n                  className=\"ingredient-amount-input\"\n                />\n              </div>\n              <button\n                type=\"button\"\n                className=\"remove-button\"\n                onClick={() => removeIngredient(index)}\n                aria-label=\"Remove ingredient\"\n              >\n                ×\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"section-container relative\">\n        {changedKeysRef.current.includes(\"instructions\") && <Ping />}\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">Instructions</h2>\n          <button type=\"button\" className=\"add-step-button\" onClick={addInstruction}>\n            + Add Step\n          </button>\n        </div>\n        <div \n          data-testid=\"instructions-container\"\n          className=\"instructions-container\">\n          {recipe.instructions.map((instruction, index) => (\n            <div key={index} className=\"instruction-item\">\n              {/* Number Circle */}\n              <div className=\"instruction-number\">{index + 1}</div>\n\n              {/* Vertical Line */}\n              {index < recipe.instructions.length - 1 && <div className=\"instruction-line\" />}\n\n              {/* Instruction Content */}\n              <div\n                className={`instruction-content ${\n                  editingInstructionIndex === index\n                    ? \"instruction-content-editing\"\n                    : \"instruction-content-default\"\n                }`}\n                onClick={() => setEditingInstructionIndex(index)}\n              >\n                <textarea\n                  className=\"instruction-textarea\"\n                  value={instruction || \"\"}\n                  onChange={(e) => updateInstruction(index, e.target.value)}\n                  placeholder={!instruction ? \"Enter cooking instruction...\" : \"\"}\n                  onFocus={() => setEditingInstructionIndex(index)}\n                  onBlur={(e) => {\n                    // Only blur if clicking outside this instruction\n                    if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget as Node)) {\n                      setEditingInstructionIndex(null);\n                    }\n                  }}\n                />\n\n                {/* Delete Button (only visible on hover) */}\n                <button\n                  type=\"button\"\n                  className={`instruction-delete-btn ${\n                    editingInstructionIndex === index\n                      ? \"instruction-delete-btn-editing\"\n                      : \"instruction-delete-btn-default\"\n                  } remove-button`}\n                  onClick={(e) => {\n                    e.stopPropagation(); // Prevent triggering parent onClick\n                    removeInstruction(index);\n                  }}\n                  aria-label=\"Remove instruction\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Improve with AI Button */}\n      <div className=\"action-container\">\n        <button\n          data-testid=\"improve-button\"\n          className={isLoading ? \"improve-button loading\" : \"improve-button\"}\n          type=\"button\"\n          onClick={() => {\n            if (!isLoading) {\n              appendMessage(\n                new TextMessage({\n                  content: \"Improve the recipe\",\n                  role: Role.User,\n                }),\n              );\n            }\n          }}\n          disabled={isLoading}\n        >\n          {isLoading ? \"Please Wait...\" : \"Improve with AI\"}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction Ping() {\n  return (\n    <span className=\"ping-animation\">\n      <span className=\"ping-circle\"></span>\n      <span className=\"ping-dot\"></span>\n    </span>\n  );\n}\n",
      "language": "typescript",
      "type": "file"
    },
    {
      "name": "style.css",
      "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n\n/* Recipe App Styles */\n.app-container {\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  position: relative;\n  overflow: auto;\n}\n\n.recipe-card {\n  background-color: rgba(255, 255, 255, 0.97);\n  border-radius: 16px;\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.25), 0 5px 15px rgba(0, 0, 0, 0.15);\n  width: 100%;\n  max-width: 750px;\n  margin: 20px auto;\n  padding: 14px 32px;\n  position: relative;\n  z-index: 1;\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n  animation: fadeIn 0.5s ease-out forwards;\n  box-sizing: border-box;\n  overflow: hidden;\n}\n\n.recipe-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3), 0 10px 20px rgba(0, 0, 0, 0.2);\n}\n\n/* Recipe Header */\n.recipe-header {\n  margin-bottom: 24px;\n}\n\n.recipe-title-input {\n  width: 100%;\n  font-size: 24px;\n  font-weight: bold;\n  border: none;\n  outline: none;\n  padding: 8px 0;\n  margin-bottom: 0px;\n}\n\n.recipe-meta {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-top: 5px;\n  margin-bottom: 14px;\n}\n\n.meta-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #555;\n}\n\n.meta-icon {\n  font-size: 20px;\n  color: #777;\n}\n\n.meta-text {\n  font-size: 15px;\n}\n\n/* Recipe Meta Selects */\n.meta-item select {\n  border: none;\n  background: transparent;\n  font-size: 15px;\n  color: #555;\n  cursor: pointer;\n  outline: none;\n  padding-right: 18px;\n  transition: color 0.2s, transform 0.1s;\n  font-weight: 500;\n}\n\n.meta-item select:hover,\n.meta-item select:focus {\n  color: #FF5722;\n}\n\n.meta-item select:active {\n  transform: scale(0.98);\n}\n\n.meta-item select option {\n  color: #333;\n  background-color: white;\n  font-weight: normal;\n  padding: 8px;\n}\n\n/* Section Container */\n.section-container {\n  margin-bottom: 20px;\n  position: relative;\n  width: 100%;\n}\n\n.section-title {\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 20px;\n  color: #333;\n  position: relative;\n  display: inline-block;\n}\n\n.section-title:after {\n  content: \"\";\n  position: absolute;\n  bottom: -8px;\n  left: 0;\n  width: 40px;\n  height: 3px;\n  background-color: #ff7043;\n  border-radius: 3px;\n}\n\n/* Dietary Preferences */\n.dietary-options {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px 16px;\n  margin-bottom: 16px;\n  width: 100%;\n}\n\n.dietary-option {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 14px;\n  cursor: pointer;\n  margin-bottom: 4px;\n}\n\n.dietary-option input {\n  cursor: pointer;\n}\n\n/* Ingredients */\n.ingredients-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 15px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.ingredient-card {\n  display: flex;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  padding: 12px;\n  margin-bottom: 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);\n  position: relative;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(240, 240, 240, 0.8);\n  width: calc(33.333% - 7px);\n  box-sizing: border-box;\n}\n\n.ingredient-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.12);\n}\n\n.ingredient-card .remove-button {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n  background: none;\n  border: none;\n  color: #ccc;\n  font-size: 16px;\n  cursor: pointer;\n  display: none;\n  padding: 0;\n  width: 24px;\n  height: 24px;\n  line-height: 1;\n}\n\n.ingredient-card:hover .remove-button {\n  display: block;\n}\n\n.ingredient-icon {\n  font-size: 24px;\n  margin-right: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  background-color: #f7f7f7;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.ingredient-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n  min-width: 0;\n}\n\n.ingredient-name-input,\n.ingredient-amount-input {\n  border: none;\n  background: transparent;\n  outline: none;\n  width: 100%;\n  padding: 0;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.ingredient-name-input {\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.ingredient-amount-input {\n  font-size: 13px;\n  color: #666;\n}\n\n.ingredient-name-input::placeholder,\n.ingredient-amount-input::placeholder {\n  color: #aaa;\n}\n\n.remove-button {\n  background: none;\n  border: none;\n  color: #999;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 0;\n  width: 28px;\n  height: 28px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10px;\n}\n\n.remove-button:hover {\n  color: #FF5722;\n}\n\n/* Instructions */\n.instructions-container {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  position: relative;\n  margin-bottom: 12px;\n  width: 100%;\n}\n\n.instruction-item {\n  position: relative;\n  display: flex;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 8px;\n  align-items: flex-start;\n}\n\n.instruction-number {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 26px;\n  height: 26px;\n  background-color: #ff7043;\n  color: white;\n  border-radius: 50%;\n  font-weight: 600;\n  flex-shrink: 0;\n  box-shadow: 0 2px 4px rgba(255, 112, 67, 0.3);\n  z-index: 1;\n  font-size: 13px;\n  margin-top: 2px;\n}\n\n.instruction-line {\n  position: absolute;\n  left: 13px; /* Half of the number circle width */\n  top: 22px;\n  bottom: -18px;\n  width: 2px;\n  background: linear-gradient(to bottom, #ff7043 60%, rgba(255, 112, 67, 0.4));\n  z-index: 0;\n}\n\n.instruction-content {\n  background-color: white;\n  border-radius: 10px;\n  padding: 10px 14px;\n  margin-left: 12px;\n  flex-grow: 1;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n  border: 1px solid rgba(240, 240, 240, 0.8);\n  position: relative;\n  width: calc(100% - 38px);\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n}\n\n.instruction-content-editing {\n  background-color: #fff9f6;\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12), 0 0 0 2px rgba(255, 112, 67, 0.2);\n}\n\n.instruction-content:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\n}\n\n.instruction-textarea {\n  width: 100%;\n  background: transparent;\n  border: none;\n  resize: vertical;\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 1.4;\n  min-height: 20px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n}\n\n.instruction-delete-btn {\n  position: absolute;\n  background: none;\n  border: none;\n  color: #ccc;\n  font-size: 16px;\n  cursor: pointer;\n  display: none;\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  line-height: 1;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 8px;\n}\n\n.instruction-content:hover .instruction-delete-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Action Button */\n.action-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 40px;\n  padding-bottom: 20px;\n  position: relative;\n}\n\n.improve-button {\n  background-color: #ff7043;\n  border: none;\n  color: white;\n  border-radius: 30px;\n  font-size: 18px;\n  font-weight: 600;\n  padding: 14px 28px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(255, 112, 67, 0.4);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  position: relative;\n  min-width: 180px;\n}\n\n.improve-button:hover {\n  background-color: #ff5722;\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(255, 112, 67, 0.5);\n}\n\n.improve-button.loading {\n  background-color: #ff7043;\n  opacity: 0.8;\n  cursor: not-allowed;\n  padding-left: 42px; /* Reduced padding to bring text closer to icon */\n  padding-right: 22px; /* Balance the button */\n  justify-content: flex-start; /* Left align text for better alignment with icon */\n}\n\n.improve-button.loading:after {\n  content: \"\"; /* Add space between icon and text */\n  display: inline-block;\n  width: 8px; /* Width of the space */\n}\n\n.improve-button:before {\n  content: \"\";\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83'/%3E%3C/svg%3E\");\n  width: 20px; /* Slightly smaller icon */\n  height: 20px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  left: 16px; /* Slightly adjusted */\n  top: 50%;\n  transform: translateY(-50%);\n  display: none;\n}\n\n.improve-button.loading:before {\n  display: block;\n  animation: spin 1.5s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: translateY(-50%) rotate(0deg); }\n  100% { transform: translateY(-50%) rotate(360deg); }\n}\n\n/* Ping Animation */\n.ping-animation {\n  position: absolute;\n  display: flex;\n  width: 12px;\n  height: 12px;\n  top: 0;\n  right: 0;\n}\n\n.ping-circle {\n  position: absolute;\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: #38BDF8;\n  opacity: 0.75;\n  animation: ping 1.5s cubic-bezier(0, 0, 0.2, 1) infinite;\n}\n\n.ping-dot {\n  position: relative;\n  display: inline-flex;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: #0EA5E9;\n}\n\n@keyframes ping {\n  75%, 100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n}\n\n/* Instruction hover effects */\n.instruction-item:hover .instruction-delete-btn {\n  display: flex !important;\n}\n\n/* Add some subtle animations */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* Better center alignment for the recipe card */\n.recipe-card-container {\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  position: relative;\n  z-index: 1;\n  margin: 0 auto;\n  box-sizing: border-box;\n}\n\n/* Add Buttons */\n.add-button {\n  background-color: transparent;\n  color: #FF5722;\n  border: 1px dashed #FF5722;\n  border-radius: 8px;\n  padding: 10px 16px;\n  cursor: pointer;\n  font-weight: 500;\n  display: inline-block;\n  font-size: 14px;\n  margin-bottom: 0;\n}\n\n.add-step-button {\n  background-color: transparent;\n  color: #FF5722;\n  border: 1px dashed #FF5722;\n  border-radius: 6px;\n  padding: 6px 12px;\n  cursor: pointer;\n  font-weight: 500;\n  font-size: 13px;\n}\n\n/* Section Headers */\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}",
      "language": "css",
      "type": "file"
    },
    {
      "name": "README.mdx",
      "content": "# 🍳 Shared State Recipe Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **shared state** functionality - a powerful\nfeature that enables bidirectional data flow between:\n\n1. **Frontend → Agent**: UI controls update the agent's context in real-time\n2. **Agent → Frontend**: The Copilot's recipe creations instantly update the UI\n   components\n\nIt's like having a cooking buddy who not only listens to what you want but also\nupdates your recipe card as you chat - no refresh needed! ✨\n\n## How to Interact\n\nMix and match any of these parameters (or none at all - it's up to you!):\n\n- **Skill Level**: Beginner to expert 👨‍🍳\n- **Cooking Time**: Quick meals or slow cooking ⏱️\n- **Special Preferences**: Dietary needs, flavor profiles, health goals 🥗\n- **Ingredients**: Items you want to include 🧅🥩🍄\n- **Instructions**: Any specific steps\n\nThen chat with your Copilot chef with prompts like:\n\n- \"I'm a beginner cook. Can you make me a quick dinner?\"\n- \"I need something spicy with chicken that takes under 30 minutes!\"\n\n## ✨ Shared State Magic in Action\n\n**What's happening technically:**\n\n- The UI and Copilot agent share the same state object (**Agent State = UI\n  State**)\n- Changes from either side automatically update the other\n- Neither side needs to manually request updates from the other\n\n**What you'll see in this demo:**\n\n- Set cooking time to 20 minutes in the UI and watch the Copilot immediately\n  respect your time constraint\n- Add ingredients through the UI and see them appear in your recipe\n- When the Copilot suggests new ingredients, watch them automatically appear in\n  the UI ingredients list\n- Change your skill level and see how the Copilot adapts its instructions in\n  real-time\n\nThis synchronized state creates a seamless experience where the agent always has\nyour current preferences, and any updates to the recipe are instantly reflected\nin both places.\n\nThis shared state pattern can be applied to any application where you want your\nUI and Copilot to work together in perfect harmony!\n",
      "language": "markdown",
      "type": "file"
    },
    {
      "name": "shared_state.py",
      "content": "from typing import Literal, List\nfrom pydantic import BaseModel\n\nfrom llama_index.core.workflow import Context\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.protocols.ag_ui.events import StateSnapshotWorkflowEvent\nfrom llama_index.protocols.ag_ui.router import get_ag_ui_workflow_router\n\n\nclass Ingredient(BaseModel):\n    icon: str\n    name: str\n    amount: str\n\nclass Recipe(BaseModel):\n    skill_level: str\n    special_preferences: List[str]\n    cooking_time: str\n    ingredients: List[Ingredient]\n    instructions: List[str]\n\n\nasync def update_recipe(ctx: Context, recipe: Recipe) -> str:\n    \"\"\"Useful for recording a recipe to shared state.\"\"\"\n    recipe = Recipe.model_validate(recipe)\n\n    async with ctx.store.edit_state() as global_state:\n        state = global_state.get(\"state\", {})\n        if state is None:\n            state = {}\n\n        state[\"recipe\"] = recipe.model_dump()\n\n        ctx.write_event_to_stream(\n            StateSnapshotWorkflowEvent(\n                snapshot=state\n            )\n        )\n\n        global_state[\"state\"] = state\n\n    return \"Recipe updated!\"\n\n\nshared_state_router = get_ag_ui_workflow_router(\n    llm=OpenAI(model=\"gpt-4.1\"),\n    frontend_tools=[update_recipe],\n    initial_state={\n        \"recipe\": None,\n    }\n)\n\n\n",
      "language": "python",
      "type": "file"
    }
  ]
}