package com.agui.core.message;

import com.agui.core.tool.ToolCall;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A message representing communication from an AI assistant or automated system.
 * <p>
 * This message type is used for responses and communications generated by AI
 * assistants or automated components within the system. It extends the base
 * message functionality with the ability to include tool calls that the
 * assistant may invoke as part of its response.
 * </p>
 * <p>
 * Assistant messages can contain both textual content (inherited from
 * {@link BaseMessage}) and a list of tool calls that represent actions
 * the assistant wants to perform or has performed.
 * </p>
 *
 * @see BaseMessage
 * @see ToolCall
 *
 * @author Pascal Wilbrink
 */
public class AssistantMessage extends BaseMessage {

    private List<ToolCall> toolCalls = new ArrayList<>();

    /**
     * Returns the role of this message as "assistant".
     * <p>
     * This implementation fulfills the abstract contract from {@link BaseMessage}
     * and identifies this message as originating from an assistant.
     * </p>
     *
     * @return "assistant" - the fixed role for assistant messages
     */
    public Role getRole() {
        return Role.assistant;
    }

    /**
     * Sets the list of tool calls associated with this assistant message.
     *
     * @param toolCalls the list of tool calls. Can be null or empty.
     */
    public void setToolCalls(final List<ToolCall> toolCalls) {
        this.toolCalls = toolCalls;
    }

    /**
     * Add a tool call
     *
     * @param toolCall the tool call to be added.
     */
    public void addToolCall(final ToolCall toolCall) {
        if (Objects.isNull(this.toolCalls)) {
            this.toolCalls = new ArrayList<>();
        }

        this.toolCalls.add(toolCall);
    }

    /**
     * Returns the list of tool calls associated with this assistant message.
     *
     * @return the list of tool calls, never null but may be empty
     */
    public List<ToolCall> getToolCalls() {
        return this.toolCalls;
    }
}