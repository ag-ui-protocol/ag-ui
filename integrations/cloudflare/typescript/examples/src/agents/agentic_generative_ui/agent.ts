/**
 * Agentic Generative UI Agent using Cloudflare Workers AI
 *
 * This agent demonstrates progressive state updates where the UI can render
 * structured data as it's being generated by the model.
 *
 * Example: When the agent generates a list of task steps, the frontend can
 * render each step progressively as it's streamed, creating a dynamic UI
 * experience.
 *
 * Features:
 * - STATE_SNAPSHOT events for progressive UI updates
 * - Structured output generation
 * - Real-time state synchronization with frontend
 */

import { CloudflareAgent, CLOUDFLARE_MODELS } from "@ag-ui/cloudflare";
import { Observable, Subscriber } from "rxjs";
import type { RunAgentInput, BaseEvent } from "@ag-ui/client";
import { EventType, type StateSnapshotEvent } from "@ag-ui/core";

/**
 * Agentic Generative UI Agent
 *
 * Generates task steps progressively and emits state updates so the frontend
 * can render the UI as the steps are being created.
 */
export class AgenticGenerativeUiAgent extends CloudflareAgent {
  constructor() {
    const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;
    const apiToken = process.env.CLOUDFLARE_API_TOKEN;

    if (!accountId || !apiToken) {
      throw new Error(
        "Missing required environment variables: CLOUDFLARE_ACCOUNT_ID and CLOUDFLARE_API_TOKEN"
      );
    }

    super({
      accountId,
      apiToken,
      model: CLOUDFLARE_MODELS.LLAMA_3_1_8B,
      systemPrompt: `You are a helpful assistant that breaks down tasks into steps.
When asked to do something, provide 5-10 clear, actionable steps.
Format each step as a short phrase in gerund form (e.g., "Opening the door", "Mixing ingredients").`,
      streamingEnabled: true,
    });
  }

  /**
   * Override run() to add STATE_SNAPSHOT events during generation
   */
  run(input: RunAgentInput): Observable<BaseEvent> {
    return new Observable((subscriber) => {
      this.executeRunWithState(input, subscriber)
        .catch((error) => {
          console.error("AgenticGenerativeUiAgent execution error:", error);
          subscriber.error(error);
        })
        .finally(() => {
          subscriber.complete();
        });
    });
  }

  /**
   * Enhanced execution with progressive state updates
   */
  private async executeRunWithState(
    input: RunAgentInput,
    subscriber: Subscriber<BaseEvent>
  ): Promise<void> {
    // Call parent execute but also emit state snapshots
    const steps: Array<{ description: string; status: string }> = [];
    let currentStepText = "";

    // First, run the parent's execution
    await this.executeRun(input, subscriber);

    // Note: In a real implementation, you would parse the streamed response
    // and extract steps progressively, emitting STATE_SNAPSHOT events.
    // For this demo, we'll emit a final state snapshot after the text completes.

    // Emit final state snapshot
    const stateSnapshot: StateSnapshotEvent = {
      type: EventType.STATE_SNAPSHOT,
      snapshot: {
        steps,
        completed: true,
      },
      timestamp: Date.now(),
    };
    subscriber.next(stateSnapshot);
  }
}

// Lazy singleton
let _agenticGenUiAgent: AgenticGenerativeUiAgent | null = null;

export function getAgenticGenerativeUiAgent(): AgenticGenerativeUiAgent {
  if (!_agenticGenUiAgent) {
    _agenticGenUiAgent = new AgenticGenerativeUiAgent();
  }
  return _agenticGenUiAgent;
}
